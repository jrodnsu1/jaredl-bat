# Set the start and end dates for the week
$today = Get-Date
$startDate = $today.AddDays(-7)
$endDate = $today.AddDays(-1)

# Query the security event logs for lockouts and failed logins
$events = Get-WinEvent -FilterHashtable @{
    LogName = 'Security'
    ID = 4740, 4625
    StartTime = $startDate
    EndTime = $endDate
}

# Initialize an empty string to store the log information
$logContent = ""

# Initialize an empty hashtable to store user counts
$userCounts = @{}

# Filter and append the lockout events to the log content
$lockouts = $events | Where-Object {$_.Id -eq 4740}
if ($lockouts) {
    $logContent += "=== Lockout Events ===`n"
    $lockouts | ForEach-Object {
        $event = $_
        $timeCreated = $event.TimeCreated
        $userName = $event.Properties[0].Value
        $target = $event.Properties[1].Value
        $logContent += "Time: $timeCreated`n"
        $logContent += "User: $userName`n"
        $logContent += "Target: $target`n`n"

        # Update user count
        if ($userCounts.ContainsKey($userName)) {
            $userCounts[$userName]++
        } else {
            $userCounts[$userName] = 1
        }
    }
} else {
    $logContent += "No lockout events found.`n"
}

# Filter and append the failed login events to the log content
$failedLogins = $events | Where-Object {$_.Id -eq 4625}
if ($failedLogins) {
    $logContent += "=== Failed Login Events ===`n"
    $failedLogins | ForEach-Object {
        $event = $_
        $timeCreated = $event.TimeCreated
        $userName = $event.Properties[5].Value
        $status = $event.Properties[8].Value
        $source = $event.Properties[19].Value
        $logContent += "Time: $timeCreated`n"
        $logContent += "User: $userName`n"
        $logContent += "Status: $status`n"
        $logContent += "Source: $source`n`n"

        # Update user count
        if ($userCounts.ContainsKey($userName)) {
            $userCounts[$userName]++
        } else {
            $userCounts[$userName] = 1
        }
    }
} else {
    $logContent += "No failed login events found.`n"
}

# Save the log content to a text file
$logPath = "C:\Windows\Temp\log.txt"
$logContent | Out-File -FilePath $logPath -Encoding UTF8

# Display the first 20 lines of the log content
Write-Host "Log file saved to: $logPath`n"
Write-Host "=== First 20 Lines of Log Content ===`n"
$first20Lines = $logContent -split "`n" | Select-Object -First 20
$first20Lines

# Save the user counts to a text file
$countPath = "C:\Windows\Temp\user_counts.txt"
$userCounts.GetEnumerator() | Sort-Object -Property Value -Descending | ForEach-Object {
    $userName = $_.Key
    $count = $_.Value
    "$userName: $count" |

